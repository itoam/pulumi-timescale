# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'ServiceTimeouts',
    'VpcsTimeouts',
    'GetProductsProductResult',
    'GetProductsProductPlanResult',
    'GetServiceResourceResult',
    'GetServiceResourceSpecResult',
    'GetServiceSpecResult',
    'GetVpcsVpcResult',
    'GetVpcsVpcPeeringConnectionResult',
]

@pulumi.output_type
class ServiceTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[str] = None):
        """
        :param str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)

    @property
    @pulumi.getter
    def create(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")


@pulumi.output_type
class VpcsTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[str] = None):
        """
        :param str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)

    @property
    @pulumi.getter
    def create(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")


@pulumi.output_type
class GetProductsProductResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 name: str,
                 plans: Sequence['outputs.GetProductsProductPlanResult']):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "plans", plans)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def plans(self) -> Sequence['outputs.GetProductsProductPlanResult']:
        return pulumi.get(self, "plans")


@pulumi.output_type
class GetProductsProductPlanResult(dict):
    def __init__(__self__, *,
                 id: str,
                 memory_gb: int,
                 milli_cpu: int,
                 price: float,
                 product_id: str,
                 region_code: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "memory_gb", memory_gb)
        pulumi.set(__self__, "milli_cpu", milli_cpu)
        pulumi.set(__self__, "price", price)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "region_code", region_code)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="memoryGb")
    def memory_gb(self) -> int:
        return pulumi.get(self, "memory_gb")

    @property
    @pulumi.getter(name="milliCpu")
    def milli_cpu(self) -> int:
        return pulumi.get(self, "milli_cpu")

    @property
    @pulumi.getter
    def price(self) -> float:
        return pulumi.get(self, "price")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> str:
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="regionCode")
    def region_code(self) -> str:
        return pulumi.get(self, "region_code")


@pulumi.output_type
class GetServiceResourceResult(dict):
    def __init__(__self__, *,
                 id: str,
                 spec: 'outputs.GetServiceResourceSpecResult'):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def spec(self) -> 'outputs.GetServiceResourceSpecResult':
        return pulumi.get(self, "spec")


@pulumi.output_type
class GetServiceResourceSpecResult(dict):
    def __init__(__self__, *,
                 enable_ha_replica: bool,
                 memory_gb: int,
                 milli_cpu: int):
        """
        :param bool enable_ha_replica: EnableHAReplica defines if a replica will be provisioned for this service.
        :param int memory_gb: MemoryGB is the memory allocated for this service.
        :param int milli_cpu: MilliCPU is the cpu allocated for this service.
        """
        pulumi.set(__self__, "enable_ha_replica", enable_ha_replica)
        pulumi.set(__self__, "memory_gb", memory_gb)
        pulumi.set(__self__, "milli_cpu", milli_cpu)

    @property
    @pulumi.getter(name="enableHaReplica")
    def enable_ha_replica(self) -> bool:
        """
        EnableHAReplica defines if a replica will be provisioned for this service.
        """
        return pulumi.get(self, "enable_ha_replica")

    @property
    @pulumi.getter(name="memoryGb")
    def memory_gb(self) -> int:
        """
        MemoryGB is the memory allocated for this service.
        """
        return pulumi.get(self, "memory_gb")

    @property
    @pulumi.getter(name="milliCpu")
    def milli_cpu(self) -> int:
        """
        MilliCPU is the cpu allocated for this service.
        """
        return pulumi.get(self, "milli_cpu")


@pulumi.output_type
class GetServiceSpecResult(dict):
    def __init__(__self__, *,
                 hostname: str,
                 pooler_hostname: str,
                 pooler_port: int,
                 port: int,
                 replica_hostname: str,
                 replica_port: int,
                 username: str):
        """
        :param str hostname: Hostname is the hostname of this service.
        :param str pooler_hostname: Hostname of the pooler of this service.
        :param int pooler_port: Port of the pooler of this service.
        :param int port: Port is the port assigned to this service.
        :param str replica_hostname: Hostname of the HA-Replica of this service.
        :param int replica_port: Port of the HA-Replica of this service.
        :param str username: Username is the Postgres username.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "pooler_hostname", pooler_hostname)
        pulumi.set(__self__, "pooler_port", pooler_port)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "replica_hostname", replica_hostname)
        pulumi.set(__self__, "replica_port", replica_port)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        Hostname is the hostname of this service.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="poolerHostname")
    def pooler_hostname(self) -> str:
        """
        Hostname of the pooler of this service.
        """
        return pulumi.get(self, "pooler_hostname")

    @property
    @pulumi.getter(name="poolerPort")
    def pooler_port(self) -> int:
        """
        Port of the pooler of this service.
        """
        return pulumi.get(self, "pooler_port")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port is the port assigned to this service.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="replicaHostname")
    def replica_hostname(self) -> str:
        """
        Hostname of the HA-Replica of this service.
        """
        return pulumi.get(self, "replica_hostname")

    @property
    @pulumi.getter(name="replicaPort")
    def replica_port(self) -> int:
        """
        Port of the HA-Replica of this service.
        """
        return pulumi.get(self, "replica_port")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username is the Postgres username.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetVpcsVpcResult(dict):
    def __init__(__self__, *,
                 cidr: str,
                 created: str,
                 error_message: str,
                 id: int,
                 name: str,
                 peering_connections: Sequence['outputs.GetVpcsVpcPeeringConnectionResult'],
                 project_id: str,
                 provisioned_id: str,
                 region_code: str,
                 status: str,
                 updated: str):
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "error_message", error_message)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "peering_connections", peering_connections)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "provisioned_id", provisioned_id)
        pulumi.set(__self__, "region_code", region_code)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated", updated)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def created(self) -> str:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> str:
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="peeringConnections")
    def peering_connections(self) -> Sequence['outputs.GetVpcsVpcPeeringConnectionResult']:
        return pulumi.get(self, "peering_connections")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="provisionedId")
    def provisioned_id(self) -> str:
        return pulumi.get(self, "provisioned_id")

    @property
    @pulumi.getter(name="regionCode")
    def region_code(self) -> str:
        return pulumi.get(self, "region_code")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def updated(self) -> str:
        return pulumi.get(self, "updated")


@pulumi.output_type
class GetVpcsVpcPeeringConnectionResult(dict):
    def __init__(__self__, *,
                 error_message: str,
                 peer_account_id: str,
                 peer_cidr: str,
                 peer_region_code: str,
                 peer_vpc_id: str,
                 provisioned_id: str,
                 status: str,
                 vpc_id: str):
        pulumi.set(__self__, "error_message", error_message)
        pulumi.set(__self__, "peer_account_id", peer_account_id)
        pulumi.set(__self__, "peer_cidr", peer_cidr)
        pulumi.set(__self__, "peer_region_code", peer_region_code)
        pulumi.set(__self__, "peer_vpc_id", peer_vpc_id)
        pulumi.set(__self__, "provisioned_id", provisioned_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> str:
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="peerAccountId")
    def peer_account_id(self) -> str:
        return pulumi.get(self, "peer_account_id")

    @property
    @pulumi.getter(name="peerCidr")
    def peer_cidr(self) -> str:
        return pulumi.get(self, "peer_cidr")

    @property
    @pulumi.getter(name="peerRegionCode")
    def peer_region_code(self) -> str:
        return pulumi.get(self, "peer_region_code")

    @property
    @pulumi.getter(name="peerVpcId")
    def peer_vpc_id(self) -> str:
        return pulumi.get(self, "peer_vpc_id")

    @property
    @pulumi.getter(name="provisionedId")
    def provisioned_id(self) -> str:
        return pulumi.get(self, "provisioned_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")



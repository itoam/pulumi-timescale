# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VpcsArgs', 'Vpcs']

@pulumi.input_type
class VpcsArgs:
    def __init__(__self__, *,
                 cidr: pulumi.Input[str],
                 region_code: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input['VpcsTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a Vpcs resource.
        :param pulumi.Input[str] cidr: The IPv4 CIDR block
        :param pulumi.Input[str] region_code: The region for this VPC.
        :param pulumi.Input[str] name: VPC Name is the configurable name assigned to this vpc. If none is provided, a default will be generated by the provider.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "region_code", region_code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[str]:
        """
        The IPv4 CIDR block
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter(name="regionCode")
    def region_code(self) -> pulumi.Input[str]:
        """
        The region for this VPC.
        """
        return pulumi.get(self, "region_code")

    @region_code.setter
    def region_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "region_code", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VPC Name is the configurable name assigned to this vpc. If none is provided, a default will be generated by the provider.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['VpcsTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['VpcsTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _VpcsState:
    def __init__(__self__, *,
                 cidr: Optional[pulumi.Input[str]] = None,
                 created: Optional[pulumi.Input[str]] = None,
                 error_message: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 provisioned_id: Optional[pulumi.Input[str]] = None,
                 region_code: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input['VpcsTimeoutsArgs']] = None,
                 updated: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Vpcs resources.
        :param pulumi.Input[str] cidr: The IPv4 CIDR block
        :param pulumi.Input[str] name: VPC Name is the configurable name assigned to this vpc. If none is provided, a default will be generated by the provider.
        :param pulumi.Input[str] region_code: The region for this VPC.
        """
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if created is not None:
            pulumi.set(__self__, "created", created)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if provisioned_id is not None:
            pulumi.set(__self__, "provisioned_id", provisioned_id)
        if region_code is not None:
            pulumi.set(__self__, "region_code", region_code)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if updated is not None:
            pulumi.set(__self__, "updated", updated)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        """
        The IPv4 CIDR block
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created", value)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_message", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VPC Name is the configurable name assigned to this vpc. If none is provided, a default will be generated by the provider.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="provisionedId")
    def provisioned_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provisioned_id")

    @provisioned_id.setter
    def provisioned_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provisioned_id", value)

    @property
    @pulumi.getter(name="regionCode")
    def region_code(self) -> Optional[pulumi.Input[str]]:
        """
        The region for this VPC.
        """
        return pulumi.get(self, "region_code")

    @region_code.setter
    def region_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_code", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['VpcsTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['VpcsTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @property
    @pulumi.getter
    def updated(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated")

    @updated.setter
    def updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated", value)


class Vpcs(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region_code: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[Union['VpcsTimeoutsArgs', 'VpcsTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Schema for a VPC. Import can be done using your VPCs name

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cidr: The IPv4 CIDR block
        :param pulumi.Input[str] name: VPC Name is the configurable name assigned to this vpc. If none is provided, a default will be generated by the provider.
        :param pulumi.Input[str] region_code: The region for this VPC.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VpcsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Schema for a VPC. Import can be done using your VPCs name

        :param str resource_name: The name of the resource.
        :param VpcsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpcsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region_code: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[Union['VpcsTimeoutsArgs', 'VpcsTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpcsArgs.__new__(VpcsArgs)

            if cidr is None and not opts.urn:
                raise TypeError("Missing required property 'cidr'")
            __props__.__dict__["cidr"] = cidr
            __props__.__dict__["name"] = name
            if region_code is None and not opts.urn:
                raise TypeError("Missing required property 'region_code'")
            __props__.__dict__["region_code"] = region_code
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["created"] = None
            __props__.__dict__["error_message"] = None
            __props__.__dict__["project_id"] = None
            __props__.__dict__["provisioned_id"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated"] = None
        super(Vpcs, __self__).__init__(
            'timescale:index/vpcs:Vpcs',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cidr: Optional[pulumi.Input[str]] = None,
            created: Optional[pulumi.Input[str]] = None,
            error_message: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            provisioned_id: Optional[pulumi.Input[str]] = None,
            region_code: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            timeouts: Optional[pulumi.Input[Union['VpcsTimeoutsArgs', 'VpcsTimeoutsArgsDict']]] = None,
            updated: Optional[pulumi.Input[str]] = None) -> 'Vpcs':
        """
        Get an existing Vpcs resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cidr: The IPv4 CIDR block
        :param pulumi.Input[str] name: VPC Name is the configurable name assigned to this vpc. If none is provided, a default will be generated by the provider.
        :param pulumi.Input[str] region_code: The region for this VPC.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VpcsState.__new__(_VpcsState)

        __props__.__dict__["cidr"] = cidr
        __props__.__dict__["created"] = created
        __props__.__dict__["error_message"] = error_message
        __props__.__dict__["name"] = name
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["provisioned_id"] = provisioned_id
        __props__.__dict__["region_code"] = region_code
        __props__.__dict__["status"] = status
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["updated"] = updated
        return Vpcs(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Output[str]:
        """
        The IPv4 CIDR block
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def created(self) -> pulumi.Output[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> pulumi.Output[str]:
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        VPC Name is the configurable name assigned to this vpc. If none is provided, a default will be generated by the provider.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="provisionedId")
    def provisioned_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "provisioned_id")

    @property
    @pulumi.getter(name="regionCode")
    def region_code(self) -> pulumi.Output[str]:
        """
        The region for this VPC.
        """
        return pulumi.get(self, "region_code")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output['outputs.VpcsTimeouts']:
        return pulumi.get(self, "timeouts")

    @property
    @pulumi.getter
    def updated(self) -> pulumi.Output[str]:
        return pulumi.get(self, "updated")


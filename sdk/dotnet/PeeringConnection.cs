// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Timescale
{
    /// <summary>
    /// Schema for a peering connection. Import can be done with timescale_vpc_id,peer_account_id,peer_region_code,peer_vpc_id format
    /// </summary>
    [TimescaleResourceType("timescale:index/peeringConnection:PeeringConnection")]
    public partial class PeeringConnection : global::Pulumi.CustomResource
    {
        [Output("errorMessage")]
        public Output<string> ErrorMessage { get; private set; } = null!;

        /// <summary>
        /// AWS account ID where the VPC to be paired
        /// </summary>
        [Output("peerAccountId")]
        public Output<string> PeerAccountId { get; private set; } = null!;

        /// <summary>
        /// CIDR for the VPC to be paired
        /// </summary>
        [Output("peerCidr")]
        public Output<string> PeerCidr { get; private set; } = null!;

        /// <summary>
        /// Region code for the VPC to be paired
        /// </summary>
        [Output("peerRegionCode")]
        public Output<string> PeerRegionCode { get; private set; } = null!;

        /// <summary>
        /// AWS ID for the VPC to be paired
        /// </summary>
        [Output("peerVpcId")]
        public Output<string> PeerVpcId { get; private set; } = null!;

        /// <summary>
        /// AWS ID of the peering connection (starts with pcx-...)
        /// </summary>
        [Output("provisionedId")]
        public Output<string> ProvisionedId { get; private set; } = null!;

        /// <summary>
        /// Peering connection status
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Timescale internal ID for a vpc
        /// </summary>
        [Output("timescaleVpcId")]
        public Output<int> TimescaleVpcId { get; private set; } = null!;

        /// <summary>
        /// AWS VPC ID of the timescale instance VPC
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a PeeringConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PeeringConnection(string name, PeeringConnectionArgs args, CustomResourceOptions? options = null)
            : base("timescale:index/peeringConnection:PeeringConnection", name, args ?? new PeeringConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PeeringConnection(string name, Input<string> id, PeeringConnectionState? state = null, CustomResourceOptions? options = null)
            : base("timescale:index/peeringConnection:PeeringConnection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/itoam/pulumi-timescale/releases/download/v${VERSION}",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PeeringConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PeeringConnection Get(string name, Input<string> id, PeeringConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new PeeringConnection(name, id, state, options);
        }
    }

    public sealed class PeeringConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// AWS account ID where the VPC to be paired
        /// </summary>
        [Input("peerAccountId", required: true)]
        public Input<string> PeerAccountId { get; set; } = null!;

        /// <summary>
        /// Region code for the VPC to be paired
        /// </summary>
        [Input("peerRegionCode", required: true)]
        public Input<string> PeerRegionCode { get; set; } = null!;

        /// <summary>
        /// AWS ID for the VPC to be paired
        /// </summary>
        [Input("peerVpcId", required: true)]
        public Input<string> PeerVpcId { get; set; } = null!;

        /// <summary>
        /// Timescale internal ID for a vpc
        /// </summary>
        [Input("timescaleVpcId", required: true)]
        public Input<int> TimescaleVpcId { get; set; } = null!;

        public PeeringConnectionArgs()
        {
        }
        public static new PeeringConnectionArgs Empty => new PeeringConnectionArgs();
    }

    public sealed class PeeringConnectionState : global::Pulumi.ResourceArgs
    {
        [Input("errorMessage")]
        public Input<string>? ErrorMessage { get; set; }

        /// <summary>
        /// AWS account ID where the VPC to be paired
        /// </summary>
        [Input("peerAccountId")]
        public Input<string>? PeerAccountId { get; set; }

        /// <summary>
        /// CIDR for the VPC to be paired
        /// </summary>
        [Input("peerCidr")]
        public Input<string>? PeerCidr { get; set; }

        /// <summary>
        /// Region code for the VPC to be paired
        /// </summary>
        [Input("peerRegionCode")]
        public Input<string>? PeerRegionCode { get; set; }

        /// <summary>
        /// AWS ID for the VPC to be paired
        /// </summary>
        [Input("peerVpcId")]
        public Input<string>? PeerVpcId { get; set; }

        /// <summary>
        /// AWS ID of the peering connection (starts with pcx-...)
        /// </summary>
        [Input("provisionedId")]
        public Input<string>? ProvisionedId { get; set; }

        /// <summary>
        /// Peering connection status
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Timescale internal ID for a vpc
        /// </summary>
        [Input("timescaleVpcId")]
        public Input<int>? TimescaleVpcId { get; set; }

        /// <summary>
        /// AWS VPC ID of the timescale instance VPC
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public PeeringConnectionState()
        {
        }
        public static new PeeringConnectionState Empty => new PeeringConnectionState();
    }
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package timescale

import (
	"context"
	"reflect"

	"errors"
	"github.com/itoam/pulumi-timescale/sdk/go/timescale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Schema for a VPC. Import can be done using your VPCs name
type Vpcs struct {
	pulumi.CustomResourceState

	// The IPv4 CIDR block
	Cidr         pulumi.StringOutput `pulumi:"cidr"`
	Created      pulumi.StringOutput `pulumi:"created"`
	ErrorMessage pulumi.StringOutput `pulumi:"errorMessage"`
	// VPC Name is the configurable name assigned to this vpc. If none is provided, a default will be generated by the provider.
	Name          pulumi.StringOutput `pulumi:"name"`
	ProjectId     pulumi.StringOutput `pulumi:"projectId"`
	ProvisionedId pulumi.StringOutput `pulumi:"provisionedId"`
	// The region for this VPC.
	RegionCode pulumi.StringOutput `pulumi:"regionCode"`
	Status     pulumi.StringOutput `pulumi:"status"`
	Timeouts   VpcsTimeoutsOutput  `pulumi:"timeouts"`
	Updated    pulumi.StringOutput `pulumi:"updated"`
}

// NewVpcs registers a new resource with the given unique name, arguments, and options.
func NewVpcs(ctx *pulumi.Context,
	name string, args *VpcsArgs, opts ...pulumi.ResourceOption) (*Vpcs, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cidr == nil {
		return nil, errors.New("invalid value for required argument 'Cidr'")
	}
	if args.RegionCode == nil {
		return nil, errors.New("invalid value for required argument 'RegionCode'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vpcs
	err := ctx.RegisterResource("timescale:index/vpcs:Vpcs", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcs gets an existing Vpcs resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcs(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcsState, opts ...pulumi.ResourceOption) (*Vpcs, error) {
	var resource Vpcs
	err := ctx.ReadResource("timescale:index/vpcs:Vpcs", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vpcs resources.
type vpcsState struct {
	// The IPv4 CIDR block
	Cidr         *string `pulumi:"cidr"`
	Created      *string `pulumi:"created"`
	ErrorMessage *string `pulumi:"errorMessage"`
	// VPC Name is the configurable name assigned to this vpc. If none is provided, a default will be generated by the provider.
	Name          *string `pulumi:"name"`
	ProjectId     *string `pulumi:"projectId"`
	ProvisionedId *string `pulumi:"provisionedId"`
	// The region for this VPC.
	RegionCode *string       `pulumi:"regionCode"`
	Status     *string       `pulumi:"status"`
	Timeouts   *VpcsTimeouts `pulumi:"timeouts"`
	Updated    *string       `pulumi:"updated"`
}

type VpcsState struct {
	// The IPv4 CIDR block
	Cidr         pulumi.StringPtrInput
	Created      pulumi.StringPtrInput
	ErrorMessage pulumi.StringPtrInput
	// VPC Name is the configurable name assigned to this vpc. If none is provided, a default will be generated by the provider.
	Name          pulumi.StringPtrInput
	ProjectId     pulumi.StringPtrInput
	ProvisionedId pulumi.StringPtrInput
	// The region for this VPC.
	RegionCode pulumi.StringPtrInput
	Status     pulumi.StringPtrInput
	Timeouts   VpcsTimeoutsPtrInput
	Updated    pulumi.StringPtrInput
}

func (VpcsState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcsState)(nil)).Elem()
}

type vpcsArgs struct {
	// The IPv4 CIDR block
	Cidr string `pulumi:"cidr"`
	// VPC Name is the configurable name assigned to this vpc. If none is provided, a default will be generated by the provider.
	Name *string `pulumi:"name"`
	// The region for this VPC.
	RegionCode string        `pulumi:"regionCode"`
	Timeouts   *VpcsTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a Vpcs resource.
type VpcsArgs struct {
	// The IPv4 CIDR block
	Cidr pulumi.StringInput
	// VPC Name is the configurable name assigned to this vpc. If none is provided, a default will be generated by the provider.
	Name pulumi.StringPtrInput
	// The region for this VPC.
	RegionCode pulumi.StringInput
	Timeouts   VpcsTimeoutsPtrInput
}

func (VpcsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcsArgs)(nil)).Elem()
}

type VpcsInput interface {
	pulumi.Input

	ToVpcsOutput() VpcsOutput
	ToVpcsOutputWithContext(ctx context.Context) VpcsOutput
}

func (*Vpcs) ElementType() reflect.Type {
	return reflect.TypeOf((**Vpcs)(nil)).Elem()
}

func (i *Vpcs) ToVpcsOutput() VpcsOutput {
	return i.ToVpcsOutputWithContext(context.Background())
}

func (i *Vpcs) ToVpcsOutputWithContext(ctx context.Context) VpcsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcsOutput)
}

// VpcsArrayInput is an input type that accepts VpcsArray and VpcsArrayOutput values.
// You can construct a concrete instance of `VpcsArrayInput` via:
//
//	VpcsArray{ VpcsArgs{...} }
type VpcsArrayInput interface {
	pulumi.Input

	ToVpcsArrayOutput() VpcsArrayOutput
	ToVpcsArrayOutputWithContext(context.Context) VpcsArrayOutput
}

type VpcsArray []VpcsInput

func (VpcsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vpcs)(nil)).Elem()
}

func (i VpcsArray) ToVpcsArrayOutput() VpcsArrayOutput {
	return i.ToVpcsArrayOutputWithContext(context.Background())
}

func (i VpcsArray) ToVpcsArrayOutputWithContext(ctx context.Context) VpcsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcsArrayOutput)
}

// VpcsMapInput is an input type that accepts VpcsMap and VpcsMapOutput values.
// You can construct a concrete instance of `VpcsMapInput` via:
//
//	VpcsMap{ "key": VpcsArgs{...} }
type VpcsMapInput interface {
	pulumi.Input

	ToVpcsMapOutput() VpcsMapOutput
	ToVpcsMapOutputWithContext(context.Context) VpcsMapOutput
}

type VpcsMap map[string]VpcsInput

func (VpcsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vpcs)(nil)).Elem()
}

func (i VpcsMap) ToVpcsMapOutput() VpcsMapOutput {
	return i.ToVpcsMapOutputWithContext(context.Background())
}

func (i VpcsMap) ToVpcsMapOutputWithContext(ctx context.Context) VpcsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcsMapOutput)
}

type VpcsOutput struct{ *pulumi.OutputState }

func (VpcsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vpcs)(nil)).Elem()
}

func (o VpcsOutput) ToVpcsOutput() VpcsOutput {
	return o
}

func (o VpcsOutput) ToVpcsOutputWithContext(ctx context.Context) VpcsOutput {
	return o
}

// The IPv4 CIDR block
func (o VpcsOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpcs) pulumi.StringOutput { return v.Cidr }).(pulumi.StringOutput)
}

func (o VpcsOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpcs) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

func (o VpcsOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpcs) pulumi.StringOutput { return v.ErrorMessage }).(pulumi.StringOutput)
}

// VPC Name is the configurable name assigned to this vpc. If none is provided, a default will be generated by the provider.
func (o VpcsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpcs) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VpcsOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpcs) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

func (o VpcsOutput) ProvisionedId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpcs) pulumi.StringOutput { return v.ProvisionedId }).(pulumi.StringOutput)
}

// The region for this VPC.
func (o VpcsOutput) RegionCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpcs) pulumi.StringOutput { return v.RegionCode }).(pulumi.StringOutput)
}

func (o VpcsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpcs) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o VpcsOutput) Timeouts() VpcsTimeoutsOutput {
	return o.ApplyT(func(v *Vpcs) VpcsTimeoutsOutput { return v.Timeouts }).(VpcsTimeoutsOutput)
}

func (o VpcsOutput) Updated() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpcs) pulumi.StringOutput { return v.Updated }).(pulumi.StringOutput)
}

type VpcsArrayOutput struct{ *pulumi.OutputState }

func (VpcsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vpcs)(nil)).Elem()
}

func (o VpcsArrayOutput) ToVpcsArrayOutput() VpcsArrayOutput {
	return o
}

func (o VpcsArrayOutput) ToVpcsArrayOutputWithContext(ctx context.Context) VpcsArrayOutput {
	return o
}

func (o VpcsArrayOutput) Index(i pulumi.IntInput) VpcsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vpcs {
		return vs[0].([]*Vpcs)[vs[1].(int)]
	}).(VpcsOutput)
}

type VpcsMapOutput struct{ *pulumi.OutputState }

func (VpcsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vpcs)(nil)).Elem()
}

func (o VpcsMapOutput) ToVpcsMapOutput() VpcsMapOutput {
	return o
}

func (o VpcsMapOutput) ToVpcsMapOutputWithContext(ctx context.Context) VpcsMapOutput {
	return o
}

func (o VpcsMapOutput) MapIndex(k pulumi.StringInput) VpcsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vpcs {
		return vs[0].(map[string]*Vpcs)[vs[1].(string)]
	}).(VpcsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcsInput)(nil)).Elem(), &Vpcs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcsArrayInput)(nil)).Elem(), VpcsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcsMapInput)(nil)).Elem(), VpcsMap{})
	pulumi.RegisterOutputType(VpcsOutput{})
	pulumi.RegisterOutputType(VpcsArrayOutput{})
	pulumi.RegisterOutputType(VpcsMapOutput{})
}
